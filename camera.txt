def detect_injury(self, image_path):
        # Replace with your Roboflow API URL and API Key
        #roboflow_api_url = "https://app.roboflow.com/ds/CHdVWAj91b?key=p4ggSEPfjC"  # Example URL
        #roboflow_api_url = "https://app.roboflow.com/ds/ftBaFNqCre?key=Jrv0mNaXbH"
        #roboflow_api_url = "https://universe.roboflow.com/capstone-unqay/wound-assessment"
        roboflow_api_url = "https://api.roboflow.com/detect/Wound Assessment 2/2"
        api_key = "HKzDw2c2PwIEFAdzCWBC"  # Replace with your API key
        project_name = "Wound Assessment 2"  # Replace with your project name
        model_version = "2"  # Replace with your model version

        # Prepare the image for upload
        with open(image_path, 'rb') as img_file:
            response = requests.post(
                f"{roboflow_api_url}/{project_name}/{model_version}/predict",
                headers={"Authorization": f"Bearer {api_key}"},
                files={"file": img_file}
            )

        # Check if the request was successful
        if response.status_code == 200:
            predictions = response.json()
            # Process the predictions and return the wound type
            return self.process_predictions(predictions)
        else:
            print(f"Error: {response.status_code} - {response.text}")
            return None

    def process_predictions(self, predictions):
        # Assuming the predictions contain a list of detected objects
        # Adjust based on your model's output format
        for prediction in predictions:
            if prediction['class'] == 'bruise':
                return 'bruise'
            elif prediction['class'] == 'abrasion':
                return 'abrasion'
            elif prediction['class'] == 'burn':
                return 'burn'
            elif prediction['class'] == 'minor_wound':
                return 'minor_wound'
        return None


class CameraMenu(Screen):
    def __init__(self, **kwargs):
        super(CameraMenu, self).__init__(**kwargs)
        self.capture = None

    def on_enter(self):
        self.capture = cv2.VideoCapture(0)
        Clock.schedule_interval(self.update, 1.0 / 30.0)

    def on_leave(self):
        if self.capture:
            self.capture.release()
            Clock.unschedule(self.update)

    def update(self, dt):
        ret, frame = self.capture.read()
        if ret:
            frame = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
            frame = cv2.flip(frame, 0)
            self.current_frame = frame
            texture = Texture.create(size=(frame.shape[1], frame.shape[0]), colorfmt='rgb')
            texture.blit_buffer(frame.tobytes(), colorfmt='rgb', bufferfmt='ubyte')
            self.ids.camera_display.texture = texture

    def capture_image(self):
        if hasattr(self, 'current_frame'):
            filename = f"captured_image/captured_image_{int(time.time())}.png"
            cv2.imwrite(filename, cv2.cvtColor(self.current_frame, cv2.COLOR_RGB2BGR))

            # Show processing page
            self.manager.current = 'processingpage'
            Clock.schedule_once(lambda dt: self.process_image(filename), 0)
        else:
            print("No current frame available.")

    def process_image(self, filename):
        # Send image to Roboflow API
        injury_type = self.detect_injury(filename)
        # Delay for processing effect
        Clock.schedule_once(lambda dt: self.navigate_to_page(injury_type), 2)

    def detect_injury(self, image_path):
        # Replace with your Roboflow API URL and API Key
        roboflow_api_url = "https://api.roboflow.com/detect/Wound Assessment 2/2"
        api_key = "HKzDw2c2PwIEFAdzCWBC"  # Replace with your API key
        project_name = "Wound Assessment 2"  # Replace with your project name
        model_version = "2"  # Replace with your model version

        # Prepare the image for upload
        with open(image_path, 'rb') as img_file:
            response = requests.post(
                f"{roboflow_api_url}/{project_name}/{model_version}/predict",
                headers={"Authorization": f"Bearer {api_key}"},
                files={"file": img_file}
            )

        # Check if the request was successful
        if response.status_code == 200:
            predictions = response.json()
            print("Predictions:", predictions)  # Debugging output
            # Process the predictions and return the wound type
            return self.process_predictions(predictions)
        else:
            print(f"Error: {response.status_code} - {response.text}")
            return None

    def process_predictions(self, predictions):
        # Check if predictions is a string and try to parse it
        if isinstance(predictions, str):
            try:
                predictions = json.loads(predictions)
            except json.JSONDecodeError:
                print("Error decoding JSON from predictions.")
                return None  # Or handle the error as appropriate

        # Ensure predictions is a list
        if not isinstance(predictions, list):
            print("Predictions is not a list:", predictions)
            return None  # Or handle the error as appropriate

        # Assuming the predictions contain a list of detected objects
        for prediction in predictions:
            if isinstance(prediction, dict) and 'class' in prediction:
                if prediction['class'] == 'bruise':
                    return 'bruise'
                elif prediction['class'] == 'abrasion':
                    return 'abrasion'
                elif prediction['class'] == 'burn':
                    return 'burn'
                elif prediction['class'] == 'minor_wound':
                    return 'minor_wound'
            else:
                print("Unexpected prediction format:", prediction)

        return None

    def navigate_to_page(self, injury_type):
        if injury_type == 'bruise':
            self.manager.current = 'bruisepage'
        elif injury_type == 'abrasion':
            self.manager.current = 'abrasionpage'
        elif injury_type == 'burn':
            self.manager.current = 'burnpage'
        elif injury_type == 'minor_wound':
            self.manager.current = 'minorwoundpage'
        else:
            print("No injury detected or unhandled injury type.")
            